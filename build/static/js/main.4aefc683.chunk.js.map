{"version":3,"sources":["logo.svg","components/Blocks.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Blocks","useState","turn","setTurn","gameEnded","setGameEnded","winner","setWinner","Array","fill","board","setBoard","totalMoves","setTotalMoves","msg","setMsg","console","log","findWinner","winningMoves","i","length","className","id","onClick","e","target","dataset","square","innerText","win","handleClick","data-square","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kJAAAA,EAAOC,QAAU,IAA0B,kC,oHC2E5BC,EAzEA,WAAO,IAAD,EACOC,mBAAS,KADhB,mBACVC,EADU,KACJC,EADI,OAEiBF,oBAAS,GAF1B,mBAEVG,EAFU,KAECC,EAFD,OAGWJ,mBAAS,IAHpB,mBAGVK,EAHU,KAGFC,EAHE,OAISN,mBAASO,MAAM,GAAGC,KAAK,KAJhC,mBAIVC,EAJU,KAIHC,EAJG,OAKkBV,mBAAS,GAL3B,mBAKXW,EALW,KAKCC,EALD,OAMKZ,mBAAS,IANd,mBAMVa,EANU,KAMLC,EANK,KAmCrBC,QAAQC,IAAI,QAASP,GACrB,IAAMQ,EAAa,WAGf,IAFA,IAAIC,EAAe,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,IAEhGC,EAAE,EAAEA,EAAED,EAAaE,OAAOD,IAChC,GAAGV,EAAMS,EAAaC,GAAG,MAAQV,EAAMS,EAAaC,GAAG,KAAOV,EAAMS,EAAaC,GAAG,MAAQV,EAAMS,EAAaC,GAAG,IAC9G,OAAOV,EAAMS,EAAaC,GAAG,IAGnC,GAAkB,IAAfR,EACC,MAAO,QAIX,OACI,yBAAKU,UAAW,aACX,0CAEAhB,GAAqB,SAAXA,EAAqB,8CAAoBA,EAAQQ,EAAK,6BAAMA,GAAY,MAAc,KAChGR,GAAqB,SAAXA,EAAqB,mDAAgC,KAEhE,yBAAKiB,GAAK,SAASC,QAAU,SAACC,GAAD,OA9CrB,SAACA,GACqB,KAAnCf,EAAMe,EAAEC,OAAOC,QAAQC,SAAmBtB,EAMpCA,GACLS,EAAO,eAAD,OAAgBT,EAAhB,WANVI,EAAMe,EAAEC,OAAOC,QAAQC,QAAU1B,EACjCuB,EAAEC,OAAOG,UAAY3B,EACrBS,EAASD,GACTP,EAAiB,MAATD,EAAe,IAAM,KAC7BW,EAAcD,EAAa,IAI3BI,QAAQC,IAAIQ,EAAEC,OAAOC,QAAQC,QACjC,IAAME,EAAMZ,IACG,MAARY,GACCzB,GAAcD,GACdG,EAAU,KACVS,QAAQC,IAAI,cACE,MAARa,GACNzB,GAAcD,GACdG,EAAU,KACVS,QAAQC,IAAI,aACC,SAARa,IACLzB,GAAcD,GACdG,EAAU,SAwB4BwB,CAAYN,KAC1C,yBAAKH,UAAW,SAASU,cAAY,MACrC,yBAAKV,UAAW,SAASU,cAAY,MACrC,yBAAKV,UAAW,SAASU,cAAY,MACrC,yBAAKV,UAAW,SAASU,cAAY,MACrC,yBAAKV,UAAW,SAASU,cAAY,MACrC,yBAAKV,UAAW,SAASU,cAAY,MACrC,yBAAKV,UAAW,SAASU,cAAY,MACrC,yBAAKV,UAAW,SAASU,cAAY,MACrC,yBAAKV,UAAW,SAASU,cAAY,OAEzC,gCCxDGC,MARf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,QCIcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.4aefc683.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\n\nconst Blocks = () => {\n    const [turn, setTurn] = useState('X');\n    const [gameEnded, setGameEnded] = useState(false);\n    const [winner, setWinner] = useState('')\n    const [board, setBoard] = useState(Array(9).fill(''));\n    const[totalMoves, setTotalMoves] = useState(0)\n    const [msg, setMsg] = useState('');\n\n\n \nconst handleClick = (e) => {\n    if(board[e.target.dataset.square] === '' && !winner){\n    board[e.target.dataset.square] = turn;//board[0] = first array    \n    e.target.innerText = turn;//it writes X or O inside every div at a click.\n    setBoard(board);\n    setTurn(turn === 'X' ? 'O' : 'X');   \n    setTotalMoves(totalMoves + 1);\n    }else if(winner){\n        setMsg(`Game ended! ${winner} won!`)\n    }\n    console.log(e.target.dataset.square)//displays indexes of the squares;\nconst win = findWinner();\n    if(win === 'X'){\n        setGameEnded(!gameEnded);\n        setWinner('X');\n        console.log(\"hi winner\")\n    } else if(win === 'O'){\n        setGameEnded(!gameEnded);\n        setWinner('O');\n        console.log(\"hi loser\")\n    }else if(win === 'draw'){\n        setGameEnded(!gameEnded);\n        setWinner('draw');\n    }\n}\nconsole.log(\"board\", board)\nconst findWinner = () =>{\n    var winningMoves = [[0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6], [0, 1, 2], [3, 4, 5], [6, 7, 8]];\n  \n    for(let i=0;i<winningMoves.length;i++) {\n      if(board[winningMoves[i][0]] === board[winningMoves[i][1]] && board[winningMoves[i][1]] === board[winningMoves[i][2]]){\n          return board[winningMoves[i][0]];//return either X or O\n        } \n    }\n    if(totalMoves === 8){\n        return 'draw';\n        }\n}\n\n    return(\n        <div className= \"container\">\n             <div>TicTacToe</div>\n            \n            {winner && winner !== 'draw' ? (<div>The winner is {winner}{msg?(<div>{msg}</div>):null}</div>): null}\n            {winner && winner === 'draw' ? (<div>the game is a draw</div>): null}\n           \n            <div id = \"blocks\" onClick ={(e)=>handleClick(e)}>\n                <div className= \"square\" data-square=\"0\"></div>\n                <div className= \"square\" data-square=\"1\"></div>\n                <div className= \"square\" data-square=\"2\"></div>\n                <div className= \"square\" data-square=\"3\"></div>\n                <div className= \"square\" data-square=\"4\"></div>\n                <div className= \"square\" data-square=\"5\"></div>\n                <div className= \"square\" data-square=\"6\"></div>\n                <div className= \"square\" data-square=\"7\"></div>\n                <div className= \"square\" data-square=\"8\"></div>\n            </div>\n            <div>\n                \n            </div>\n        </div>\n    )\n}\nexport default Blocks;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Blocks from './components/Blocks';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Blocks />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}